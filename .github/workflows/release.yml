name: Create Github Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The package version to create (ex: 1.0.0)"
        required: true

jobs:
  verify-package-version:
    timeout-minutes: 20
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Extract branch name
        run: echo "branch=${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Ensure package version is properly set
        run: |
          echo """
          import json, sys
          with open('package.json') as version_file:
              version = json.load(version_file)['version']
          if version != sys.argv[1]:
              raise ValueError(f'Invalid version {version} / {sys.argv[1]}')
          """ > /tmp/check1.py
          python /tmp/check1.py "${{ github.event.inputs.version }}"

      - name: Validate branch name
        run: |
          echo """
          import json, sys, re
          with open('package.json') as version_file:
              version = json.load(version_file)['version']
          x = re.search(r'(\d+)\.(\d+)\.(\d+)(?:\.([a-zA-Z0-9_]+))?', version)
          if not x:
              raise ValueError('Invalid version expression')
          if f'release/{x[1]}.{x[2]}' != sys.argv[1]:
              raise ValueError(
                  f'Branch name mismatch: release/{x[1]}.{x[2]} != {sys.argv[1]}'
              )
          """ > /tmp/check.py
          python /tmp/check.py "${{ steps.extract_branch.outputs.branch }}"

  release:
    needs: [verify-package-version]
    timeout-minutes: 20
    name: Release package
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: get core latest version tag
        run: echo "core_version=$(git tag -l --sort=-committerdate | head -1)" >> $GITHUB_OUTPUT
        id: extract_core_version

      - name: Download core schema file
        run: |
            [ "${{ steps.extract_core_version.outputs.core_version }}" != "" ]
            curl --fail-with-body https://raw.githubusercontent.com/Avaiga/taipy-core/${{ steps.extract_core_version.outputs.core_version }}/src/taipy/core/config/config.schema.json -o schemas/core.config.schema.json

      - name: Extract commit hash
        run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        id: extract_hash

      - name: Create/update release and tag
        run: |
            gh release create ${{ github.event.inputs.version }} schemas/core.config.schema.json --target ${{ steps.extract_hash.outputs.hash }} --notes "Release created using Github Workflows"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
